#!/usr/bin/env perl
use v5.14;
use warnings;

use AnyEvent;
use AnyEvent::IRC::Client;
use AnyEvent::Handle;
use AnyEvent::Strict;
use Data::Dump qw(dump);
use Data::UUID;
use Nagios::Plugin;

my $np = Nagios::Plugin->new(
    usage => 'Usage: %s --host HOST --nick NICK',
    version => '1.0',
    url => 'https://github.com/mxey/check_irc_nick',
    blurb => 'Connect to IRC server and check that nick is connected',
);

$np->add_arg(
    spec => 'nick|n=s',
    help => 'Monitored nick',
    required => 1,
);

$np->add_arg(
    spec => 'host|h=s',
    help => 'IRC host',
    required => 1,
);

$np->add_arg(
    spec => 'port|p=i',
    help => 'IRC port (default: 6667)',
    default => 6667,
);

$np->add_arg(
    spec => 'interval|i=i',
    help => 'Check interval (in seconds)',
    default => 300,
);

$np->getopts();

my $client = AnyEvent::IRC::Client->new();

if ($np->opts->verbose) {
    $client->reg_cb(
        send => sub {
            my (undef, $ircmsg) = @_;
            say '--> ' . dump($ircmsg);
        },
        read => sub {
            my (undef, $ircmsg) = @_;
            say '<-- ' . dump($ircmsg);
        },
    );
}

my $my_name = 'check_irc_nick_' . substr(Data::UUID->new()->create_str(), 0, 20);
$client->connect($np->opts->host, $np->opts->port, {
    nick => $my_name,
    user => 'check_irc_nick',
    real => $my_name,
});

open(my $fh, '>>', 'check_irc_nick.log') or die "could not open command pipe: $!";

my $hdl = AnyEvent::Handle->new(
	fh => $fh,
);

while (1) {
	my $cv = AnyEvent->condvar;
	
	my $timeout = AnyEvent->timer(after => $np->opts->timeout, cb => sub {
		$cv->send(UNKNOWN, 'timed out');
	});

	# End of WHOIS
	my $cb_guard = $client->reg_cb(irc_318 => sub {
	    if (my $ident = $client->nick_ident($np->opts->nick)) {
	        $cv->send(OK, "Ident info: $ident");
	    }
	    else {
	        $cv->send(CRITICAL, 'Could not WHOIS ' . $np->opts->nick);
	    }
	});

	$client->send_srv(WHOIS => $np->opts->nick);
	
	my ($ret, $msg) = $cv->recv();
	$client->unreg_cb($cb_guard);
	undef $timeout;
	
	my $out = "$ret $msg\n";
	print $out if $np->opts->verbose;
	$hdl->push_write($out);
	
	my $repeat_cv = AnyEvent->condvar;
	my $repeat = AnyEvent->timer(after => $np->opts->interval, cb => $repeat_cv);
	$repeat_cv->recv();
}